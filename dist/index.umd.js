(function(n,r){typeof exports=="object"&&typeof module!="undefined"?r(exports):typeof define=="function"&&define.amd?define(["exports"],r):(n=typeof globalThis!="undefined"?globalThis:n||self,r(n.MemoIframeIpc={}))})(this,function(n){"use strict";var g=Object.defineProperty;var p=(n,r,l)=>r in n?g(n,r,{enumerable:!0,configurable:!0,writable:!0,value:l}):n[r]=l;var d=(n,r,l)=>p(n,typeof r!="symbol"?r+"":r,l);var h=(n,r,l)=>new Promise((e,s)=>{var o=i=>{try{a(l.next(i))}catch(c){s(c)}},t=i=>{try{a(l.throw(i))}catch(c){s(c)}},a=i=>i.done?e(i.value):Promise.resolve(i.value).then(o,t);a((l=l.apply(n,r)).next())});class r{constructor(e){d(this,"windowMessageHandler",{});d(this,"messageHandler",{});d(this,"callbackId",1);d(this,"callbacks",{});d(this,"isIframe",!0);d(this,"source",{url:"",query:{}});d(this,"defaultOptions",{methods:["localStorage.removeItem","localStorage.setItem","localStorage.getItem","localStorage.clear","memoryStorage.removeItem","memoryStorage.setItem","memoryStorage.getItem","memoryStorage.clear","storage.removeItem","storage.setItem","storage.getItem","storage.clear","storage.keys","browser.windowPostMessage","browser.openChildWindow"],appId:"memo-app"});d(this,"withAppIdKeys",["storage.removeItem","storage.setItem","storage.getItem","storage.clear","storage.keys","file.savePluginFile","file.readPluginFile","file.checkPluginFileExist"]);d(this,"options");d(this,"player",{play:()=>new Promise(e=>{var s;(s=this.browser)==null||s.windowPostMessage({type:"window:player:play:req",data:{}}),e()}),pause:()=>new Promise(e=>{var s;(s=this.browser)==null||s.windowPostMessage({type:"window:player:pause:req",data:{}}),e()})});this.options={methods:[...this.defaultOptions.methods,...e.methods||[]],appId:e.appId||this.defaultOptions.appId},this.init()}init(){this.source.url=window.location.href,this.source.query=this.getQueryParams(this.source.url),window.addEventListener("message",e=>{const{from:s,action:o,params:t}=e.data;if(s===`main:${this.options.appId}`){if(o==="IPC_RESPONSE_SEND")for(const a in this.windowMessageHandler)this.windowMessageHandler[a](t.event,t.data);if(o==="IPC_RESPONSE"){const{callbackId:a,success:i,params:c}=e.data;this.callbacks[a]&&(i?this.callbacks[a].success(c.data):this.callbacks[a].error(c.error),delete this.callbacks[a])}if(o==="IPC_RESPONSE_SEND_MESSAGE")for(const a in this.messageHandler)this.messageHandler[a](t.event,t.data)}}),this.addMethods(this.options.methods)}getQueryParams(e){const s={},o=e.match(/\?([^#]+)/);if(o){const a=o[1],i=new URLSearchParams(a);for(const[c,m]of i.entries())s[c]=m}const t=e.match(/#.*\?(.+)/);if(t){const a=t[1],i=new URLSearchParams(a);for(const[c,m]of i.entries())s[c]=m}return s}addMethod(e){const s=e.split(".");let o=this;for(let t=0;t<s.length-1;t++)o[s[t]]||(o[s[t]]={}),o=o[s[t]];o[s[s.length-1]]=(...t)=>(this.withAppIdKeys.includes(e)&&t.push(this.options.appId),new Promise((a,i)=>{this.callMain(e,t,a,i)}))}addMethods(e){for(const s of e)this.addMethod(s)}callMain(e,s,o,t){this.callbackId++,this.callbacks[this.callbackId]={success:o,error:t},window.parent.postMessage({from:`renderer:${this.options.appId}`,action:"IPC_REQUEST",data:{callbackId:this.callbackId,method:e,params:s}},"*")}handleMessage(e,s){return h(this,null,function*(){this.messageHandler[s]=e})}removeHandler(e){return h(this,null,function*(){e&&this.messageHandler[e]&&delete this.messageHandler[e]})}handleWindowMessage(e,s){return h(this,null,function*(){this.windowMessageHandler[s]=e})}removeWindowHandler(e){return h(this,null,function*(){e&&this.windowMessageHandler[e]&&delete this.windowMessageHandler[e]})}}n.Bridge=r,Object.defineProperty(n,Symbol.toStringTag,{value:"Module"})});
